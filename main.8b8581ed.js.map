{"version":3,"sources":["src/AudioAPI/AudioAPI.ts","src/AudioAPI/index.ts","src/Visualizer/constants.ts","src/Visualizer/helpers/math.ts","src/Visualizer/helpers/color.ts","src/Visualizer/compositions/spectrum.ts","src/Visualizer/primitives/circle.ts","src/Visualizer/helpers/position.ts","src/Visualizer/Compositions/bubbleWorld.ts","src/Visualizer/Visualizer.ts","src/Visualizer/index.ts","src/main.ts"],"names":[],"mappings":"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","file":"main.8b8581ed.js","sourceRoot":"..","sourcesContent":["export class AudioAPI {\n    private context: AudioContext;\n    private analyser: AnalyserNode;\n    private connectedNode: MediaStreamAudioSourceNode | null = null;\n    private analyserData: Float32Array;\n  \n    constructor() {\n      this.context = new (window.AudioContext ||\n        (window as any).webkitAudioContext)();\n  \n      this.analyser = this.context.createAnalyser();\n      this.analyserData = new Float32Array(this.analyser.frequencyBinCount);\n  \n      this.requestPermissions();\n    }\n  \n    public getAudioData = () => {\n      this.analyser.getFloatFrequencyData(this.analyserData);\n      return this.analyserData;\n    };\n  \n    private connect = (connectedNode: MediaStreamAudioSourceNode) => {\n      this.connectedNode = connectedNode;\n      this.connectedNode.connect(this.analyser);\n    };\n  \n    public releaseConnection = () => {\n      if (this.connectedNode) {\n        this.connectedNode.disconnect(this.analyser);\n      }\n    };\n  \n    private requestPermissions = () => {\n      if (navigator.getUserMedia) {\n        navigator.getUserMedia(\n          {\n            audio: true,\n            video: false\n          },\n          stream => {\n            const audioSource = this.context.createMediaStreamSource(stream);\n            this.connect(audioSource);\n          },\n          err => {\n            console.log(\"Error initializing user media stream: \" + err);\n          }\n        );\n      }\n    };\n  }\n  ","export { AudioAPI } from './AudioAPI';","export const AUDIO_DATA_LENGTH = 1024;\n\nexport const WINDOW_WIDTH = window.innerWidth;\n\nexport const WINDOW_HEIGHT = window.innerHeight;\n\nexport const WINDOW_CENTER = {\n  X: WINDOW_WIDTH / 2,\n  Y: WINDOW_HEIGHT / 2\n};\n","const VALUE_INCREMENT = 130;\n\nexport function makePositive(value: number) {\n    value += VALUE_INCREMENT;\n\n    return !value || value < 0 ? 0 : value;\n}\n\nexport function random(min: number, max: number) {\n    return Math.random() * (max - min) + min;\n}","import { random } from \"./math\";\n\nexport const DEFAULT_COLOR = \"#FFFFFF\";\n\nexport enum Color {\n    Green = \"#5EBD3E\",\n    Yellow = \"#FFB900\",\n    Orange = \"#F78200\",\n    Red = \"#E23838\",\n    Purple = \"#973999\",\n    Blue = \"#009CDF\"\n};\n\nconst COLORS = [\n    Color.Green,\n    Color.Yellow,\n    Color.Orange,\n    Color.Red,\n    Color.Purple,\n    Color.Blue\n];\n\nexport function getRandomColor() {\n    return COLORS[Math.round(random(0, COLORS.length - 1))];\n}\n\nexport function getColorByKey(key: number) {\n    return COLORS[key % 6]\n}","import { WINDOW_WIDTH, AUDIO_DATA_LENGTH } from \"../constants\";\nimport { makePositive } from \"../helpers/math\";\nimport { getColorByKey, DEFAULT_COLOR } from \"../helpers/color\";\n\nconst GROUP_FREQUENCIES = 16,\n  BAR_WIDTH = WINDOW_WIDTH * GROUP_FREQUENCIES / AUDIO_DATA_LENGTH;\n\nconst BAR_HEIGHT_SCALE = 8;\n\ninterface IBarProps {\n  size: number,\n  offset: number,\n  color: string;\n}\n\nfunction drawBar(ctx: CanvasRenderingContext2D, props: IBarProps) {\n  const { size, offset, color = DEFAULT_COLOR } = props;\n\n  ctx.beginPath();\n  ctx.rect(offset * BAR_WIDTH, 0, BAR_WIDTH, size * BAR_HEIGHT_SCALE);\n  ctx.fillStyle = color;\n  ctx.fill();\n  ctx.closePath();\n}\n\nlet time = 0;\n\nfunction getTimeOffset() {\n  time++;\n  return Math.round(time/600);\n}\n\nexport function drawSpectrum(\n  ctx: CanvasRenderingContext2D,\n  data: Float32Array\n) {\n  data.filter((_, index) => index % GROUP_FREQUENCIES === 0).forEach((value, index) => {\n    drawBar(ctx, {\n      size: makePositive(value),\n      offset: index,\n      color: getColorByKey(index + getTimeOffset())\n    });\n  });\n}\n","import { WINDOW_CENTER } from \"../constants\";\nimport { DEFAULT_COLOR } from \"../helpers/color\";\n\nconst DATA_SCALE = 5;\n\ninterface ICircleProps {\n    x: number;\n    y: number;\n    radius: number;\n    color: string;\n    opacity?: number;\n}\n\nexport function drawCircle(ctx: CanvasRenderingContext2D, props: ICircleProps) {\n    const { x, y, radius, color, opacity = 1 } = props;\n\n    ctx.beginPath();\n    ctx.globalAlpha = opacity;\n    ctx.ellipse(x, y, radius, radius, 0, 0, 360);\n    ctx.fillStyle = color;\n    ctx.fill();\n    ctx.globalAlpha = 1;\n    ctx.closePath();\n}\n\nexport function drawMiddleCircle(\n    ctx: CanvasRenderingContext2D,\n    radius: number\n) {\n    drawCircle(ctx, {\n        x: WINDOW_CENTER.X,\n        y: WINDOW_CENTER.Y,\n        radius: radius * DATA_SCALE,\n        color: DEFAULT_COLOR\n    });\n}\n","import { WINDOW_WIDTH, WINDOW_HEIGHT } from \"../constants\";\nimport { random } from \"./math\";\n\nexport interface IPoint {\n    x: number;\n    y: number;\n}\n\nexport function getRandomPosition(): IPoint {\n    return {\n        x: random(0, WINDOW_WIDTH),\n        y: random(0, WINDOW_HEIGHT)\n    }\n}","import { drawCircle } from \"../primitives/circle\";\nimport { getRandomPosition, IPoint } from \"../helpers/position\";\nimport { makePositive, random } from \"../helpers/math\";\nimport { getRandomColor, DEFAULT_COLOR } from \"../helpers/color\";\n\nconst REPOSITION_FREQUENCY = 2;\nconst BUBBLE_COUNT = 30;\nconst LIFECYCLE_LENGTH = REPOSITION_FREQUENCY * BUBBLE_COUNT;\n\ninterface IScaledPoint extends IPoint {\n    scaleMultiplier: number;\n    color: string;\n}\n\nconst randomizeCoords = (): IScaledPoint[] => {\n    let array: IScaledPoint[] = [];\n\n    for (let i = 0; i < BUBBLE_COUNT; i++) {\n        array.push({\n            ...getRandomPosition(),\n            scaleMultiplier: random(1, 5),\n            color: getRandomColor()\n        });\n    }\n\n    return array;\n}\n\nlet CIRCLE_COORDS = randomizeCoords();\n\nlet time = 0;\n\nfunction update() {\n    if(time === LIFECYCLE_LENGTH) {\n        time = 0;\n    } else {\n        time++\n    }\n\n    if(time % REPOSITION_FREQUENCY === 0) {\n        CIRCLE_COORDS[time / REPOSITION_FREQUENCY] = {\n            ...getRandomPosition(),\n            scaleMultiplier: random(1, 5),\n            color: getRandomColor()\n        }\n    }\n}\n\nfunction getOpacityByLifeCycleTime(time: number) {\n    if(time < LIFECYCLE_LENGTH / 2) {\n        return time * 2 / LIFECYCLE_LENGTH\n    } else {\n        return (LIFECYCLE_LENGTH - time) * 2 / LIFECYCLE_LENGTH\n    }\n}\n\nfunction getOpacityByIndex(index: number) {\n    let offsettedTime = time + index * REPOSITION_FREQUENCY;\n\n    if(offsettedTime > LIFECYCLE_LENGTH) {\n        offsettedTime -= LIFECYCLE_LENGTH\n    }\n\n    return getOpacityByLifeCycleTime(offsettedTime);\n}\n\nexport function drawBubbleWorld(ctx: CanvasRenderingContext2D, data: Float32Array, colorized = false) {\n    update();\n\n    [0, 128, 256, 384, 512].forEach((freq, i) => {\n        for (let j = 0; j < 6; j++) {\n            const index = i * 6 + j,\n                { scaleMultiplier, color, ...coords } = CIRCLE_COORDS[index];\n\n            drawCircle(ctx, {\n                radius: makePositive(data[freq]) * scaleMultiplier,\n                ...coords,\n                color: colorized ? color : DEFAULT_COLOR,\n                opacity: getOpacityByIndex(index)\n            });\n        }\n    })\n}","import { AudioAPI } from \"../AudioAPI\";\nimport { drawSpectrum } from \"./compositions/spectrum\";\nimport { WINDOW_WIDTH, WINDOW_HEIGHT } from \"./constants\";\nimport { drawMiddleCircle } from \"./primitives/circle\";\nimport { drawBubbleWorld } from \"./Compositions/bubbleWorld\";\nimport { makePositive } from \"./helpers/math\";\nimport { drawStrobe } from \"./primitives/strobe\";\n\nexport class Visualizer {\n    private ctx: CanvasRenderingContext2D;\n    private audioAPI: AudioAPI;\n\n    constructor(ctx: CanvasRenderingContext2D, audioAPI: AudioAPI) {\n        this.ctx = ctx;\n        this.audioAPI = audioAPI;\n\n        this.redraw();\n    }\n\n    getData = () => this.audioAPI.getAudioData();\n\n    getFreqValue = (freq: number) => {\n        return makePositive(this.getData()[freq]);\n    };\n\n    redraw = () => {\n        this.ctx.clearRect(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);\n\n        // drawMiddleCircle(this.ctx, this.getFreqValue(6));\n        drawSpectrum(this.ctx, this.getData());\n        drawBubbleWorld(this.ctx, this.getData(), true);\n        // drawStrobe(this.ctx, this.getFreqValue(6));\n\n        requestAnimationFrame(this.redraw);\n    };\n}\n\nfunction smoothOutValue(value: number) {\n    return Math.round(value / 10) * 10;\n}\n","export { Visualizer } from './Visualizer';","import { AudioAPI } from './AudioAPI';\nimport { Visualizer } from './Visualizer';\nimport { WINDOW_WIDTH, WINDOW_HEIGHT } from './Visualizer/constants';\n\nconst start = (ctx: CanvasRenderingContext2D) => {\n    const audioAPI = new AudioAPI();\n\n    const visualizer = new Visualizer(ctx, audioAPI);\n\n    return visualizer;\n}\n\nwindow.onload = () => {\n    const startButton = document.getElementById(\"start-button\"),\n        fullscreenButton = document.getElementById(\"fullscreen-button\"),\n        mainCanvas = document.getElementById(\"main-canvas\") as HTMLCanvasElement,\n        ctx = mainCanvas.getContext(\"2d\");\n\n    mainCanvas.width = WINDOW_WIDTH;\n    mainCanvas.height = WINDOW_HEIGHT;\n\n    startButton.addEventListener(\"click\", () => {\n        start(ctx);\n        startButton.remove();\n    });\n\n    fullscreenButton.addEventListener(\"click\", () => {\n        const canvas = mainCanvas as any;\n\n        if (canvas.webkitRequestFullScreen) {\n            canvas.webkitRequestFullScreen();\n        }\n        else {\n            canvas.mozRequestFullScreen();\n        }\n    });\n}"]}